package main

repoTemplate := `
package {{.Package}}

import (
	"context"
	"errors"

	"github.com/gofrs/uuid"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

var (
	Err{{.Entity}}NotFound = errors.New("{{.Entity}} not found")
)

type {{.Entity}}Repository struct {
	collection *mongo.Collection
}

func New{{.Entity}}Repository(collection *mongo.Collection) *{{.Entity}}Repository {
	return &{{.Entity}}Repository{collection}
}

func (r *{{.Entity}}Repository) List(ctx context.Context) ([]{{.Entity}}, error) {
	var items []{{.Entity}}
	cursor, err := r.collection.Find(ctx, primitive.M{})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)
	for cursor.Next(ctx) {
		var item {{.Entity}}
		err := cursor.Decode(&item)
		if err != nil {
			return nil, err
		}
		items = append(items, item)
	}
	if err := cursor.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

func (r *{{.Entity}}Repository) Get(ctx context.Context, id uuid.UUID) (*{{.Entity}}, error) {
	filter := primitive.M{"_id": id}
	result := r.collection.FindOne(ctx, filter)
	if result.Err() != nil {
		if result.Err() == mongo.ErrNoDocuments {
			return nil, Err{{.Entity}}NotFound
		}
		return nil, result.Err()
	}
	var item {{.Entity}}
	err := result.Decode(&item)
	if err != nil {
		return nil, err
	}
	return &item, nil
}

func (r *{{.Entity}}Repository) Create(ctx context.Context, item *{{.Entity}}) error {
	if item.ID == uuid.Nil {
		item.ID = uuid.Must(uuid.NewV4())
	}
	_, err := r.collection.InsertOne(ctx, item)
	return err
}

func (r *{{.Entity}}Repository) Update(ctx context.Context, item *{{.Entity}}) error {
	filter := primitive.M{"_id": item.ID}
	update := bson.M{"$set": item}
	result, err := r.collection.UpdateOne(ctx, filter, update)
	if err != nil {
		return err
	}
	if result.MatchedCount == 0 {
		return Err{{.Entity}}NotFound
	}
	return nil
}

func (r *{{.Entity}}Repository) Delete(ctx context.Context, id uuid.UUID) error {
	filter := primitive.M{"_id": id}
	result, err := r.collection.DeleteOne(ctx, filter)
	if err != nil {
		return err
	}
	if result.DeletedCount == 0 {
		return Err{{.Entity}}NotFound
	}
	return nil
}
`